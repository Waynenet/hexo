name: 自动部署

on:
  push:
    branches:
      - master
  release:
    types:
      - published

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: 检查分支
      uses: actions/checkout@v5
      with:
        ref: master
        fetch-depth: 0

    - name: 安装 Node
      uses: actions/setup-node@v4
      with:
        node-version: "22.x"

    - name: 安装 Hexo
      run: |
        export TZ='Asia/Shanghai'
        npm install hexo-cli -g

    - name: 缓存 Hexo 依赖
      id: cache-dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: 安装依赖
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: npm install --save

    - name: 生成静态文件
      run: |
        hexo clean
        hexo generate
        hexo douban
        gulp pwa

    - name: 检查提交信息并提取版本号
      id: extract_tag
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        if [[ $COMMIT_MSG =~ [Rr]elease[[:space:]]+(v[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?) ]]; then
          echo "发现版本号: ${BASH_REMATCH[1]}"
          echo "tag_name=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
        else
          echo "提交信息中未发现'release vX.Y.Z'格式的版本号"
          echo "tag_name=" >> $GITHUB_OUTPUT
        fi

    - name: 生成变更日志
      id: generate_changelog
      if: steps.extract_tag.outputs.tag_name != ''
      run: |
        # 搜索所有符合发布格式的提交
        RELEASE_COMMITS=$(git log --grep="[Rr]elease[[:space:]]+v[0-9]" --pretty=format:'%H')
        RELEASE_COUNT=$(echo "$RELEASE_COMMITS" | wc -l)

        if [ "$RELEASE_COUNT" -lt 2 ]; then
          echo "未找到上一个发布版本的提交。将使用从初始提交到当前的所有提交记录。"
          COMMIT_RANGE="HEAD"
        else
          # 获取上一个发布的 hash
          # `head -n 2` 取前两个，`tail -n 1` 取这两个中的最后一个
          PREVIOUS_RELEASE_HASH=$(echo "$RELEASE_COMMITS" | head -n 2 | tail -n 1)
          echo "找到上一个发布版本的提交: $PREVIOUS_RELEASE_HASH"
          COMMIT_RANGE="$PREVIOUS_RELEASE_HASH..HEAD"
        fi
        
        # 生成变更日志，并排除掉 Release v... 这类提交信息本身
        CHANGELOG_BODY=$(git log $COMMIT_RANGE --pretty=format:'- %s (%h) - %an' --no-merges | grep -iv 'release[[:space:]]+v[0-9]' || true)
        
        if [ -z "$CHANGELOG_BODY" ]; then
          CHANGELOG_BODY="自上次发布以来没有新的功能性提交。"
        fi

        echo "changelog<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG_BODY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
 
    - name: 部署
      run: |
        git clone "https://Waynenet:${{ secrets.HEXO }}@github.com/Waynenet/Waynenet.github.io.git" deploy_repo
        cd deploy_repo
        ls -A | grep -vE '^(\.git|\.github|README\.md)$' | xargs -r rm -rf
        cp -r ../dist/. .
        git config user.name 'Waynenet'
        git config user.email '54445994+Waynenet@users.noreply.github.com'
        git add -A
        if git diff-index --quiet HEAD --; then
          echo "没有文件变更，无需提交。"
        else
          git commit -m "${{ github.event.head_commit.message }}"
          git push
          echo "部署成功！"
        fi

    - name: 触发目标仓库的 Release 创建流程
      if: steps.extract_tag.outputs.tag_name != ''
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.HEXO }}
        repository: Waynenet/Waynenet.github.io
        event-type: create-release-tag
        client-payload: >
          {
            "tag": "${{ steps.extract_tag.outputs.tag_name }}",
            "message": ${{ toJSON(env.changelog) }}
          }
